This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-08T02:57:44.914Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
.changeset/chatty-days-end.md
.changeset/config.json
.changeset/neat-games-repeat.md
.changeset/README.md
.changeset/tender-beds-attend.md
.changeset/thick-carrots-pull.md
.github/workflows/ci.yml
.github/workflows/release.yml
.gitignore
biome.json
CHANGELOG.md
package.json
README.md
src/backups/index.ts
src/backups/types.ts
src/carbon-plugin/types.ts
src/carbon-star.ts
src/carbon.ts
src/file-manager/index.ts
src/file-manager/types.ts
src/index.ts
src/invites/index.ts
src/invites/types.ts
src/managers/api-key-manager.ts
src/managers/minecraft-manager.ts
src/managers/stat-manager.ts
src/stars/users/index.ts
src/types/api-keys.ts
src/types/create-star.ts
src/types/star.ts
src/types/user.ts
tsconfig.json

================================================================
Files
================================================================

================
File: .changeset/chatty-days-end.md
================
---
"@carbonhost/typescript": patch
---

Updted file manager to be complete with all URL methods

================
File: .changeset/config.json
================
{
  "$schema": "https://unpkg.com/@changesets/config@3.0.3/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "master",
  "updateInternalDependencies": "patch",
  "ignore": []
}

================
File: .changeset/neat-games-repeat.md
================
---
"@carbonhost/typescript": patch
---

include serviceName in type and class

================
File: .changeset/README.md
================
# Changesets

Hello and welcome! This folder has been automatically generated by `@changesets/cli`, a build tool that works
with multi-package repos, or single-package repos to help you version and publish your code. You can
find the full documentation for it [in our repository](https://github.com/changesets/changesets)

We have a quick list of common questions to get you started engaging with this project in
[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)

================
File: .changeset/tender-beds-attend.md
================
---
"@carbonhost/typescript": patch
---

file manager

================
File: .changeset/thick-carrots-pull.md
================
---
"@carbonhost/typescript": patch
---

MinecraftManager, fix uptime type

================
File: .github/workflows/ci.yml
================
name: CI
on:
  push:
    branches:
      - "**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - run: pnpm install --no-frozen-lockfile
      - run: pnpm run lint && pnpm run build

================
File: .github/workflows/release.yml
================
name: Publish
on:
  workflow_run:
    workflows: [CI]
    branches: [master]
    types: [completed]

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm run release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

================
File: .gitignore
================
# Based on https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore

# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Caches

.cache

# Diagnostic reports (https://nodejs.org/api/report.html)

report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# Runtime data

pids
_.pid
_.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage
*.lcov

# nyc test coverage

.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt

# Bower dependency directory (https://bower.io/)

bower_components

# node-waf configuration

.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)

build/Release

# Dependency directories

node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)

web_modules/

# TypeScript cache

*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Optional stylelint cache

.stylelintcache

# Microbundle cache

.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history

.node_repl_history

# Output of 'npm pack'

*.tgz

# Yarn Integrity file

.yarn-integrity

# dotenv environment variable files

.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)

.parcel-cache

# Next.js build output

.next
out

# Nuxt.js build / generate output

.nuxt
dist

# Gatsby files

# Comment in the public line in if your project uses Gatsby and not Next.js

# https://nextjs.org/blog/next-9-1#public-directory-support

# public

# vuepress build output

.vuepress/dist

# vuepress v2.x temp and cache directory

.temp

# Docusaurus cache and generated files

.docusaurus

# Serverless directories

.serverless/

# FuseBox cache

.fusebox/

# DynamoDB Local files

.dynamodb/

# TernJS port file

.tern-port

# Stores VSCode versions used for testing VSCode extensions

.vscode-test

# yarn v2

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# IntelliJ based IDEs
.idea

# Finder (MacOS) folder config
.DS_Store

================
File: biome.json
================
{
  "$schema": "https://biomejs.dev/schemas/1.8.3/schema.json",
  "formatter": {
    "enabled": true,
    "indentWidth": 2,
    "indentStyle": "space"
  },
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "complexity": {
        "noForEach": "off"
      },
      "correctness": {
        "useExhaustiveDependencies": "off"
      },
      "a11y": {
        "useKeyWithClickEvents": "off",
        "useButtonType": "off"
      },
      "style": {
        "noNonNullAssertion": "off"
      },
      "suspicious": {
        "noArrayIndexKey": "off"
      }
    }
  },
  "files": {
    "ignore": ["node_modules", "out", "dist", "build", "public", "coverage", "README.md", "tsconfig.json"]
  }
}

================
File: CHANGELOG.md
================
# @carbonhost/typescript

## 0.0.20

### Patch Changes

- 3f96a09: update esxports

## 0.0.19

### Patch Changes

- aff16bb: change to use frozen lockfile

## 0.0.18

### Patch Changes

- 64c651d: update star schema to include serviceName

## 0.0.17

### Patch Changes

- 6c4fa0f: Add support for api keys

## 0.0.16

### Patch Changes

- 48f3005: Change to use domain url instead of ip

## 0.0.15

### Patch Changes

- 0ffa9cf: include files in package.json

## 0.0.14

### Patch Changes

- b27d844: set privacy of repo to public

## 0.0.13

### Patch Changes

- 4a9067f: Update to use pnpm, and hopefully build correctly.

================
File: package.json
================
{
  "name": "@carbonhost/typescript",
  "version": "0.0.67",
  "main": "dist/index.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "tsup src/index.ts --format cjs,esm --dts",
    "release": "pnpm run build && changeset publish",
    "release:local": "pnpm run build && pnpm publish",
    "lint": "tsc"
  },
  "packageManager": "pnpm@9.13.2",
  "author": {
    "name": "Carbon Host",
    "email": "contact@carbon.host",
    "url": "https://carbon.host"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/carbon-host/carbon-typescript"
  },
  "license": "GNU AGPL",
  "keywords": [
    "carbon",
    "typescript",
    "sdk",
    "hosting",
    "carbonhost",
    "minecraft",
    "minecraft-server"
  ],
  "bugs": {
    "url": "https://github.com/carbon-host/carbon-typescript/issues"
  },
  "homepage": "https://github.com/carbon-host/carbon-typescript",
  "devDependencies": {
    "@biomejs/biome": "1.9.4",
    "@changesets/cli": "^2.27.9",
    "tsup": "^8.3.5",
    "typescript": "^5.6.3"
  },
  "peerDependencies": {
    "typescript": "^5.0.0"
  },
  "dependencies": {
    "axios": "^1.7.7"
  },
  "release": {
    "branches": [
      "master"
    ]
  },
  "files": [
    "dist"
  ]
}

================
File: README.md
================
# Carbon TypeScript SDK

[![License](https://img.shields.io/badge/license-GNU%20AGPL-blue)](LICENSE)
[![TypeScript](https://img.shields.io/badge/types-TypeScript-blue)](https://www.typescriptlang.org/)
[![Build](https://img.shields.io/github/actions/workflow/status/carbon-host/carbon-typescript/ci.yml)](https://github.com/carbon-host/carbon-typescript/actions)
[![npm](https://img.shields.io/npm/v/@carbonhost/typescript)](https://www.npmjs.com/package/@carbonhost/typescript)

The **Carbon TypeScript SDK** enables easy integration with the Carbon Host platform for managing Minecraft server hosting and related services. Built with TypeScript, it provides a streamlined interface for creating, managing, and deploying Minecraft servers.

## Installation

To install the SDK, use your preferred package manager:

```bash
npm install @carbonhost/typescript
```
```bash
bun add @carbonhost/typescript
```

## Usage

Import the SDK in your TypeScript project and initialize it with your API key to get started.

```typescript
import Carbon from '@carbonhost/typescript';

const carbon = new Carbon({ apiKey: 'your-api-key' });

// Example: Fetch all stars (given top level await, otherwise fetch Promises accordingly)
const stars = await carbon.getStars();

console.log(stars);
```

## Documentation

For full documentation, visit the [Documentation](https://carbon.host/docs/typescript) page.

## Support

If you encounter issues or have questions, open an issue on our [GitHub Issues page](https://github.com/carbon-host/carbon-typescript/issues) or join our [Discord server](https://discord.gg/carbon).

## License

This project is licensed under the [GNU AGPL License](LICENSE).

================
File: src/backups/index.ts
================
import type { AxiosInstance } from "axios";
import type { CarbonStar } from "../carbon-star";
import type {Backup} from "./types";

export class BackupManager {
    private star: CarbonStar;
    private axios: AxiosInstance;
    private controllerAxios: AxiosInstance;

    constructor(star: CarbonStar, axios: AxiosInstance, controllerAxios: AxiosInstance) {
        this.star = star;
        this.axios = axios;
        this.controllerAxios = controllerAxios;
    }

    async getBackups() {
        return this.controllerAxios.get<Backup[]>(`/v1/stars/${this.star._id}/backups`).then(res => res.data)
    }

    async getBackup(backupId: string) {
        return this.controllerAxios.get<Backup>(`/v1/stars/${this.star._id}/backups/${backupId}`).then(res => res.data) 
    }

    async deleteBackup(backupId: string) {
        return this.controllerAxios.delete(`/v1/stars/${this.star._id}/backups/${backupId}`).then(res => res.data)
    }

    async downloadBackup(backupId: string) {
        return this.controllerAxios.get<{ url: string }>(`/v1/stars/${this.star._id}/backups/${backupId}/download`).then(res => res.data)
    }

    // Daemon Only
    async createBackup({name, paths}: { name: string, paths: string[] }) {
        return this.axios.post<{ status: string, message: string }>("/backups", {
            name,
            paths
        }).then(res => res.data);
    }

    async restoreBackup(backupId: string) {
        return this.axios.put<{ status: string, message: string }>(`/backups/${backupId}/restore`).then(res => res.data);
    }

}

================
File: src/backups/types.ts
================
export type Backup = {
    _id: string;

    ownerId: string;
    starId: string;

    name: string;
    description?: string;

    starType: string;
    starVersion?: string; // Don't show for CUSTOM jars

    s3: {
        key: string; // Path to the backup (archive name)
        size: number; // Bytes
        bucket: string;
    },

    createdAt: Date;
}

================
File: src/carbon-plugin/types.ts
================
export interface CarbonPluginCommandResponse {
  pagination: {
    limit: number;
    offset: number;
  };
  data: string[];
}

export interface Pagination {
  limit: number;
  offset: number;
}

export interface CarbonStarStats {
  onlinePlayers: number
  ramUsage: number
  cpuUsage: number
  timestamp: Date
}

export interface CarbonPluginInfo {
  tps: number
  mspt: number
  resources: {
    ramUsage: number
    ramTotal: number
    cpuUsage: number
    cpuCores: number
  }
  playerCountInfo: {
    onlinePlayers: number
    maxPlayers: number
  }
}

export interface CarbonPluginPlayerInfo {
  name: string;
  uuid: string;

  firstPlayed: number;
  lastSeen: number;
  lastLogin: number;

  isOp: boolean;
  idleDuration: number;
  ping: number;
  location: {
    x: number;
    y: number;
    z: number;
    world: string;
  };
}

export interface CarbonPluginPlayersResponse {
  pagination: Pagination;
  data: {
    players: CarbonPluginPlayerInfo[];
    countInfo: {
      onlinePlayers: number;
      maxPlayers: number;
    };
  };
}

================
File: src/carbon-star.ts
================
import type { AxiosInstance } from "axios";
import axios from "axios";
import type {Carbon} from "./carbon";
import type {CarbonStarType, PortMapping, Protocol, StarStatus} from "./types/star";
import {StatManager} from "./managers/stat-manager";
import {MinecraftManager} from "./managers/minecraft-manager";
import {FileManager} from "./file-manager";
import type {UpdateStarType} from "./types/create-star";
import {BackupManager} from "./backups";
import {UserManager} from "./stars/users";
import type {AdvancedConfig} from "./types/create-star";

export class CarbonStar {
  // @ts-ignore
  carbonClient: Carbon;
  private axios: AxiosInstance;

  _id: string;
  serviceName: string;
  ownerId: string;
  name: string;
  type: string;
  version: string;
  javaVersion: "21" | "17" | "11" | "8";
  storageId: string;
  ip: string;
  galaxyURL: string;

  subUsers: {
    userId: string;
    minecraftUUID?: string;
    email: string;
  }[]

  resources: {
    storage: number;
    memory: number;
    vCPU: number;
  };

  ports: PortMapping[];
  createdAt: Date;
  lastBilled?: Date;

  billingCycle: "monthly" | "hourly";
  advanced: AdvancedConfig;

  constructor(
    carbonClient: Carbon,
    apiKey: string,
    carbonStar: CarbonStarType,
  ) {
    this.carbonClient = carbonClient;
    this.axios = axios.create({
      baseURL: `https://${carbonStar?.galaxyURL}/v1/stars/${carbonStar._id}`,
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
    });

    this._id = carbonStar._id;
    this.serviceName = carbonStar.serviceName;
    this.ownerId = carbonStar.ownerId;
    this.name = carbonStar.name;
    this.type = carbonStar.type;
    this.version = carbonStar.version;
    this.javaVersion = carbonStar.javaVersion;
    this.storageId = carbonStar.storageId;
    this.ip = carbonStar.ip;
    this.galaxyURL = carbonStar.galaxyURL;

    this.subUsers = carbonStar.subUsers;

    this.resources = {
      storage: carbonStar.resources.storage,
      memory: carbonStar.resources.memory,
      vCPU: carbonStar.resources.vCPU
    };

    this.ports = carbonStar.ports;
    this.createdAt = carbonStar.createdAt;
    this.lastBilled = carbonStar.lastBilled;

    this.billingCycle = carbonStar.billingCycle;
    this.advanced = carbonStar.advanced || {};
  }

  getPublishedPort(targetPort: number, protocol: Protocol = 'tcp'): number | undefined {
    const portMapping = this.ports.find(
      port => port.targetPort === targetPort && port.protocols.includes(protocol)
    );
    return portMapping?.publishedPort;
  }

  get users() {
    return new UserManager(this, this.axios)
  }

  get minecraft() {
    return new MinecraftManager(this, this.axios);
  }

  get files() {
    return new FileManager(this, this.axios);
  }

  get stats() {
    return new StatManager(this, this.axios);
  }

  get backups() {
    return new BackupManager(this, this.axios, this.carbonClient.getAxios());
  }

  async delete() {
    return this.carbonClient.getAxios().delete(`/v1/stars/${this._id}`).then((res) => res.data);
  }

  async update(request: UpdateStarType) {
    return this.carbonClient.getAxios().patch(`/v1/stars/${this._id}`, request).then((res) => res.data);
  }

  async rename(name: string) {
    return this.carbonClient.getAxios().put(`/v1/stars/${this._id}/name`, {
      name,
    }).then((res) => res.data);
  }

  async getLogs() {
    return this.axios.get<{ logs: string }>("/logs").then((res) => res.data);
  }

  async getStatus(): Promise<StarStatus> {
    return this.axios.get<StarStatus>("/status").then((res) => res.data);
  }

  async getUptime() {
    return this.axios.get<{ uptime: string }>("/uptime").then((res) => res.data)
      .then((res) => res.uptime);
  }

  async setPower(action: "start" | "stop" | "restart" | "kill") {
    return this.carbonClient.getAxios().put(`/v1/stars/${this._id}/power`, { action }).then((res) => res.data);
  }

  async executeCommand(command: string) {
    return this.axios
      .post("/command", {
        command,
      })
      .then((res) => res.data);
  }

  async uploadFile(file: File, path: string) {
    const formData = new FormData();
    formData.append("file", file);

    return this.axios
      .post<{ status: string; filePath: string }>("/files/upload", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
        params: {
          path,
        },
      })
      .then((res) => res.data);
  }
}

================
File: src/carbon.ts
================
import type {AxiosInstance} from "axios";
import axios from "axios";
import type {CarbonStarType} from "./types/star";
import {CarbonStar} from "./carbon-star";
import type {CreateStarType} from "./types/create-star";
import type {UserInfo} from "./types/user";
import type {CreateAPIKeyResponseType, CreateAPIKeyType} from "./types/api-keys";
import {APIKeyManager} from "./managers/api-key-manager";
import {InviteManager} from "./invites";

export class Carbon {
  private axios: AxiosInstance
  private apiKey: string;

  constructor({ apiKey, url }: { apiKey: string, url?: string }) {
    this.apiKey = apiKey;
    this.axios = axios.create({
      baseURL: url || "https://staging.api.carbon.host",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
      },
    });
  }

  async getMe() {
    return this.axios.get<UserInfo>("/v1/me").then(res => res.data)
  }

  async createAPIKey({ name, description, type }: CreateAPIKeyType) {
    return this.axios.post<CreateAPIKeyResponseType>("/v1/api-keys", {
      name,
      description,
      type,
    }).then(res => res.data)
  }

  get apiKeys() {
    return new APIKeyManager(this.axios);
  }

  get inviteManager() {
    return new InviteManager(this.axios);
  }

  private async fetchStars() {
    return this.axios.get<CarbonStarType[]>("/v1/stars").then(res => res.data)
  }

  private async fetchStar(id: string) {
    return this.axios.get<CarbonStarType>(`/v1/stars/${id}`).then(res => res.data)
  }

  async getStars(): Promise<CarbonStar[]> {
    const stars = await this.fetchStars();
    return stars.map(star => new CarbonStar(this, this.apiKey, star));
  }

  async getStar(id: string): Promise<CarbonStar> {
    const star = await this.fetchStar(id);
    return new CarbonStar(this, this.apiKey, star);
  }

  async createStar(body: CreateStarType) {
    return this.axios.post("/v1/stars", body).then(res => res.data)
      .catch(err => {
        console.log("Error creating star", err.data)
        throw err
      })
  }

  getAxios() {
    return this.axios;
  }
}

================
File: src/file-manager/index.ts
================
import type { AxiosInstance } from "axios";
import type { CarbonStar } from "../carbon-star";
import type { FileInfo, ListFilesResponse } from "./types";

export class FileManager {
    private star: CarbonStar;
    private axios: AxiosInstance;

    constructor(star: CarbonStar, axios: AxiosInstance) {
        this.star = star;
        this.axios = axios;
    }

    private async fetchFiles(directory: string) {
        return this.axios.get<ListFilesResponse>(`/files?path=${directory}`).then(res => res.data)
    }

    async getFiles(directory: string) {
        return convertListFiles(directory, await this.fetchFiles(directory))
    }

    async getFile(path: string) {
        return this.axios.get<{ content?: string, imageSrc?: string }>(`/files/content?path=${path}`).then(res => res.data)
    }

    async saveFile(path: string, content: string) {
        return this.axios.put("/files/write", { path, content })
    }

    async moveFile(sourcePath: string, destinationPath: string) {
        return this.axios.post("/files/move", { source: sourcePath, target: destinationPath })
    }

    async renameFile(path: string, name: string) {
        return this.axios.put("/files/rename", { path, name })
    }

    async extractFile(file: string, target: string) {
        return this.axios.post("/files/extract", { source: file, target })
    }

    async duplicateFile(path: string) {
        return this.axios.post("/files/duplicate", { path })
    }

    async downloadFile(path: string) {
        return this.axios.get("/files/download", { params: { path }, responseType: 'blob' })
    }

    async deleteFile(params: { path?: string, paths?: string[] }) {
        return this.axios.delete("/files", { data: params })
    }

    async createFile(parentDirectory: string, fileName: string) {
        return this.axios.post("/files", {
            type: "file",
            path: `${parentDirectory}/${fileName}`
        })
    }

    async createDirectory(parentDirectory: string, folderName: string) {
        return this.axios.post("/files", {
            type: "directory",
            path: `${parentDirectory}/${folderName}`
        })
    }

    async archiveFiles(params: { target?: string, paths: string[] }) {
        return this.axios.post("/files/archive", {
            method: "zip",
            paths: params.paths,
            target: params.target
        })
    }
}

function convertListFiles(parentDirectory: string, listFilesResponse: ListFilesResponse) {
    const fileList: FileInfo[] = [];

    listFilesResponse.directories.forEach((dir) => {
        fileList.push({
            name: dir.name,
            parentDirectory: parentDirectory,
            isDirectory: true,
            fileType: "directory" as const,
            size: dir.size,
            lastModified: dir.lastModified,
        });
    });

    listFilesResponse.files.forEach((file) => {
        fileList.push({
            name: file.name,
            parentDirectory: parentDirectory,
            isDirectory: false,
            fileType: "file" as const,
            size: file.size,
            lastModified: file.lastModified,
        });
    });

    return fileList;
}

================
File: src/file-manager/types.ts
================
export type FileInfo = {
  name: string;
  parentDirectory: string;
  isDirectory: boolean;
  fileType: "file" | "directory";
  size: number;
  lastModified: string;
};

export type FetchedFileInfo = {
  name: string;
  lastModified: string;
  size: number;
};

export type ListFilesResponse = {
  directories: FetchedFileInfo[];
  files: FetchedFileInfo[];
};

================
File: src/index.ts
================
export { Carbon } from "./carbon";
export { CarbonStar } from "./carbon-star";

export * from "./types/star";
export * from "./types/create-star";
export * from "./types/user";

export * from "./file-manager/types";
export * from "./carbon-plugin/types";
export * from "./backups/types";
export * from "./invites/types";
export * from "./stars/users/types"

================
File: src/invites/index.ts
================
import type { AxiosInstance } from "axios";
import type {APIKeyType} from "../types/api-keys";
import type {Invite} from "./types";

export class InviteManager {
    private axios: AxiosInstance;

    constructor(axios: AxiosInstance) {
        this.axios = axios;
    }

    async getInvite(inviteId: string) {
        return this.axios.get<Invite>(`/v1/invites/${inviteId}`).then(res => res.data)
    }

    async acceptInvite(inviteId: string) {
        return this.axios.post<{success: boolean}>(`/v1/invites/${inviteId}/accept`).then(res => res.data)
    }

}

================
File: src/invites/types.ts
================
export type Invite = {
  _id: string,
  starId: string,
  starName: string,
  inviteeEmail: string,
  invitedById: string,
  invitedByEmail: string,
}

================
File: src/managers/api-key-manager.ts
================
import type {AxiosInstance} from "axios";
import type {APIKeyType, VerifyAPIKeyResponseType} from "../types/api-keys";

export class APIKeyManager {
  private axios: AxiosInstance;

  constructor(axios: AxiosInstance) {
    this.axios = axios;
  }

  async getAPIKey(apiKeyId: string) {
    return this.axios.get<APIKeyType>(`/v1/api-keys/${apiKeyId}`).then(res => res.data)
  }

  async getAPIKeys() {
    return this.axios.get<APIKeyType[]>("/v1/api-keys").then(res => res.data)
  }

  async verifyAPIKey(apiKey: string) {
    return this.axios.post<VerifyAPIKeyResponseType>("/v1/api-keys/verify", {token: apiKey}).then(res => res.data)
  }

  async deleteAPIKey(apiKeyId: string) {
    return this.axios.delete<{ message: string }>(`/v1/api-keys/${apiKeyId}`).then(res => res.data)
  }
}

================
File: src/managers/minecraft-manager.ts
================
import type { AxiosInstance } from "axios";
import type {CarbonPluginInfo, CarbonPluginPlayersResponse} from "../carbon-plugin/types";
import type {CarbonStar} from "../carbon-star";
import type {CarbonPluginCommandResponse} from "../carbon-plugin/types";

export class MinecraftManager {
  private star: CarbonStar;
  private axios: AxiosInstance;

  constructor(star: CarbonStar, axios: AxiosInstance) {
    this.star = star;
    this.axios = axios;
  }

  getJoinableDomain() {
    const port = this.star.ports.find(port => port.internalType === "minecraft")?.publishedPort ?? this.star.getPublishedPort(25565);
    return `${this.star.ip}:${port}`
  }

  async getCommands(query: string) {
    return this.axios.get<CarbonPluginCommandResponse>("/carbon-plugin/commands", {
      params: {
        query,
      },
    }).then((res) => res.data);
  }

  async getInfo() {
    return this.axios.get<CarbonPluginInfo>("/carbon-plugin").then((res) => res.data);
  }

  async getPlayers(limit?: number, offset?: number) {
    return this.axios.get<CarbonPluginPlayersResponse>("/carbon-plugin/players", {
      params: {
        limit,
        offset,
      },
    }).then((res) => res.data);
  }

  async installCarbonPlugin() {
    return this.axios.post("/carbon-plugin/install").then((res) => res.data);
  }
}

================
File: src/managers/stat-manager.ts
================
import type { AxiosInstance } from "axios";
import type {CarbonStar} from "../carbon-star";
import type {CarbonStarStats} from "../carbon-plugin/types";

export class StatManager {
  // @ts-ignore
  private star: CarbonStar;
  private axios: AxiosInstance;

  constructor(star: CarbonStar, axios: AxiosInstance) {
    this.star = star;
    this.axios = axios;
  }

  async getRecentStats(): Promise<CarbonStarStats> {
    return this.axios
      .get<CarbonStarStats>("/stats/recent")
      .then((res) => res.data);
  }
}

================
File: src/stars/users/index.ts
================
import type { AxiosInstance } from "axios";
import type { CarbonStar } from "../../carbon-star";
import type {Invite} from "../../invites/types";

export class UserManager {
  private star: CarbonStar;
  private axios: AxiosInstance;
  private controllerAxios: AxiosInstance;

  constructor(star: CarbonStar, axios: AxiosInstance) {
    this.star = star;
    this.axios = axios;
    this.controllerAxios = star.carbonClient.getAxios()
  }

  async inviteUser(email: string) {
    return this.controllerAxios
      .post<{ success: boolean }>(`/v1/stars/${this.star._id}/users/invites`, {
        email,
      })
      .then((res) => res.data);
  }

  async getInvites() {
    return this.controllerAxios
      .get<Invite[]>(`/v1/stars/${this.star._id}/users/invites`)
      .then((res) => res.data);
  }

  async cancelInvite(inviteId: string) {
    return this.controllerAxios
      .delete(`/v1/stars/${this.star._id}/users/invites/${inviteId}`)
      .then((res) => res.data);
  }

  async removeUser(userId: string) {
    return this.controllerAxios
      .delete(`/v1/stars/${this.star._id}/users/${userId}`)
      .then((res) => res.data);
  }
}

================
File: src/types/api-keys.ts
================
import type {UserInfo} from "./user";

export type CreateAPIKeyType = {
  name: string;
  description?: string;
  type: "api-key" | "account-key";
}

export type CreateAPIKeyResponseType = {
  identifier: string;
  token: string;
}

export type APIKeyType = {
  _id: string;
  userId: string;

  name: string;
  description?: string;
  type: "api-key" | "account-key";

  expiresAt: Date;
  createdAt: Date;
}

/*
            user: ZodUser,
            apiKey: z.object({
              _id: z.string(),
              userId: z.string(),
              expiresAt: z.number(),
              createdAt: z.number(),
            }),
 */

export type VerifyAPIKeyResponseType = {
  user: UserInfo,
  clerkId: string
}

================
File: src/types/create-star.ts
================
import type {RequestedPortInfo} from "./star.ts";

export type StarType = "VANILLA" | "PAPER" | "PUFFERFISH" | "PURPUR" | "FOLIA" | "VELOCITY" | "WATERFALL" | "FORGE" | "FABRIC" | "CUSTOM";

export type WorldConfig = {
  url?: string;
  forceOnStart?: boolean;
  allowNether?: boolean;
  spawnAnimals?: boolean;
  spawnMonsters?: boolean;
  spawnNPCs?: boolean;
  spawnProtection?: number;
  generateStructures?: boolean;
  maxWorldSize?: number;
  viewDistance?: number;
  simulationDistance?: number;
}

export type WhitelistConfig = {
  enabled?: boolean;
  players?: string[];
}

export type ResourcePackConfig = {
  url?: string;
  sha1?: string;
  enforce?: boolean;
}

export type AdvancedConfig = {
  billingCycle?: "monthly" | "hourly";
  useAikarFlags?: boolean;
  plugins?: string[];
  mods?: string[];
  world?: WorldConfig;
  whitelist?: WhitelistConfig;
  resourcePack?: ResourcePackConfig;
  commandBlocks?: boolean;
  hardcore?: boolean;
  pvp?: boolean;
  onlineMode?: boolean;
  seed?: string;
  defaultGameMode?: "survival" | "creative" | "adventure" | "spectator";
  motd?: string;
  difficulty?: "peaceful" | "easy" | "normal" | "hard";
  icon?: string;
  maxPlayers?: number;
  timezone?: string;
}

export type CreateStarType = {
  eula?: boolean;
  name: string;
  type: StarType;
  customJar?: string;
  version?: string;
  javaVersion: "8" | "11" | "17" | "21";
  resources: {
    memory: number;
  };
  advanced?: AdvancedConfig;
}

export type UpdateStarType = Partial<CreateStarType>;

================
File: src/types/star.ts
================
export type CarbonStarType = {
  _id: string;
  serviceName: string;
  ownerId: string;
  name: string;
  type: string;
  customJar?: string;
  version: string;
  javaVersion: "21" | "17" | "11" | "8";
  nodeId: string;
  storageId: string;
  ip: string;
  galaxyURL: string;
  
  subUsers: {
    userId: string;
    minecraftUUID?: string;
    email: string;
    createdAt: Date;
  }[];

  resources: {
    storage: number;
    memory: number;
    vCPU: number;
  };

  ports: PortMapping[];

  advanced: {
    useAikarFlags: boolean;
    plugins?: string[];
    mods?: string[];
    
    world: {
      url?: string;
      forceOnStart: boolean;
      allowNether: boolean;
      spawnAnimals: boolean;
      spawnMonsters: boolean;
      spawnNPCs: boolean;
      spawnProtection?: number;
      generateStructures: boolean;
      maxWorldSize?: number;
    };

    whitelist?: {
      enabled: boolean;
      players: string[];
    };

    resourcePack?: {
      url?: string;
      sha1?: string;
      enforce: boolean;
    };

    commandBlocks: boolean;
    hardcore: boolean;
    pvp: boolean;
    onlineMode: boolean;
    seed?: string;
    defaultGameMode: "survival" | "creative" | "adventure" | "spectator";
    motd?: string;
    difficulty?: "peaceful" | "easy" | "normal" | "hard";
    icon?: string;
    maxPlayers?: number;
    timezone: string;
  };

  lastBilled?: Date;
  billingCycle: "monthly" | "hourly";
  createdAt: Date;
}

/** Valid protocol types for Docker port mappings */
export type Protocol = "tcp" | "udp" | "sctp";

/**
 * Represents requested port configuration for a service
 * @interface RequestedPortInfo
 */
export interface RequestedPortInfo {
  protocols: Protocol[];
  targetPort: number;
  name?: string;
}

/**
 * Extends RequestedPortInfo to include the published (external) port and internal type
 * @interface PortMapping
 * @extends {RequestedPortInfo}
 */
export interface PortMapping extends RequestedPortInfo {
  publishedPort: number;
  internalType?: "minecraft" | "carbon-plugin";
}

/**
 * Defines resource limits for Docker services
 * @interface ResourceLimits
 */
export interface ResourceLimits {
  MemoryBytes: number;  // Memory limit in bytes
  NanoCPUs: number;     // CPU limit in nano CPUs (1 CPU = 1e9)
}

export type StarStatus = {
  status: string;
}

================
File: src/types/user.ts
================
export interface UserInfo {
  clerkId: string;
  stripeId: string | null;

  email: string;
  minecraftUUID?: string;

  plan: "pro" | "enterprise" | null;
  credits: number;
  redeemedGifts: string[]; // Gift IDs

  limits: {
    storage: number;
    memory: number;
    cpu: number;
    starCount: number;
    starPortLimit: number;
  };

  createdAt: number; // Unix timestamp
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    /* Base Options: */
    "esModuleInterop": true,
    "skipLibCheck": true,
    "target": "es2022",
    "verbatimModuleSyntax": true,
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",
    /* Strictness */
    "strict": true,
    "noUncheckedIndexedAccess": true,
    /* If NOT transpiling with TypeScript: */
    "moduleResolution": "Bundler",
    "module": "ESNext",
    "noEmit": true,
    /* If your code runs in the DOM: */
    "lib": ["es2022", "dom", "dom.iterable"],
  }
}
